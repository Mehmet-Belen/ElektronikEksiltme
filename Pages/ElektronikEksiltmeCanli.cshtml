@page
@model ElektronikEksiltmeCanliModel
@{
    ViewData["Title"] = " Elektronik Eksiltme - Canlı Oturum";
    var tr = System.Globalization.CultureInfo.GetCultureInfo("tr-TR");
    decimal previousDecrement = 0;
}

<h1 class="page-title">@ViewData["Title"]</h1>

<div class="canli-container">
    <section class="ihale-bilgi">
        <h2>İhale Bilgileri</h2>
        <div class="grid">
            <div>
                <div class="label">İhale Kayıt No</div>
                <div class="value">@Model.Ihale.IKN</div>
            </div>
            <div>
                <div class="label">İdare Adı</div>
                <div class="value">@Model.Ihale.AuthorityName</div>
            </div>
            <div>
                <div class="label">İhale Adı</div>
                <div class="value">@Model.Ihale.TenderName</div>
            </div>
            <div>
                <div class="label">Kısım Adı</div>
                <div class="value">@Model.Ihale.PartName</div>
            </div>
        </div>
    </section>

    <section class="timers-rank">
        <div class="timers">
            <div class="timer-card">
                <div class="timer-title">Turun Bitişine Kalan</div>
                <div id="round-timer" class="timer-value">00:00</div>
                <div class="timer-sub">Bitiş: @Model.RoundEnd</div>
            </div>
            <div class="timer-card">
                <div class="timer-title">Eksiltmenin Bitişine Kalan</div>
                <div id="tender-timer" class="timer-value">00:00</div>
                <div class="timer-sub">Bitiş: @Model.TenderEnd</div>
            </div>
        </div>
        <aside class="submitted-bids">
            <div class="rank-badge inside">
                <span class="rank-number">@Model.CurrentRank</span>
                <span class="rank-label">Sıralamanız</span>
            </div>
            <div class="submitted-bids-title">Verilen Tekliflere Ait Bilgiler</div>
            <ul class="submitted-bids-list">
                @if (Model.SubmittedBids != null && Model.SubmittedBids.Count > 0)
                {
                    foreach (var s in Model.SubmittedBids.OrderBy(x => x.Round))
                    {
                        var thisRoundDecrement = s.Decrement - previousDecrement;
                        <li>
                            <div><strong>Tur @s.Round</strong></div>
                            <div>Toplam Teklif Tutarı: <strong>@s.GrandTotal.ToString("N2", tr) ₺</strong></div>
                            <div>Turda Yapılan Eksiltme: <strong>@thisRoundDecrement.ToString("N2", tr) ₺</strong></div>
                            <div>Toplam Eksiltme Miktarı: <strong>@s.Decrement.ToString("N2", tr) ₺</strong></div>
                        </li>
                        previousDecrement = s.Decrement; // bir sonraki tur için güncelle
                    }
                }
                else
                {
                    <li>Henüz teklif gönderilmedi</li>
                }
            </ul>
        </aside>
    </section>

    <form method="post">
        <input type="hidden" name="CurrentRound" value="@Model.CurrentRound" />
        @if (!ViewContext.ViewData.ModelState.IsValid)
        {
            <div class="alert alert-warning">
                @ViewContext.ViewData.ModelState[string.Empty]?.Errors.FirstOrDefault()?.ErrorMessage</div>
        }
        <input type="hidden" id="min-step" data-value="@Model.MinDecrementStep" />
        @{
            // Current round per-round decrement as computed for display above
            decimal currentRoundDecForBaseline = Model.DecrementTotal;
            if (Model.SubmittedBids != null && Model.SubmittedBids.Count > 0)
            {
                var ordered2 = Model.SubmittedBids.OrderBy(x => x.Round).ToList();
                decimal prevRoundsTotal2 = 0m;
                foreach (var sb in ordered2)
                {
                    if (sb.Round < Model.CurrentRound)
                    {
                        prevRoundsTotal2 = sb.Decrement;
                    }
                    else if (sb.Round == Model.CurrentRound)
                    {
                        currentRoundDecForBaseline = sb.Decrement - prevRoundsTotal2;
                        break;
                    }
                }
            }
            // Baseline grand total for this round = current grand + per-round decrement
            decimal roundBaselineGrand = Model.GrandTotal + currentRoundDecForBaseline;
        }
        <input type="hidden" id="prev-grand" data-value="@roundBaselineGrand" />
        <section class="items">
            <h2>Kalemlere İlişkin Teklif Bilgileri</h2>
            <table class="items-table">
                <thead>
                    <tr>
                        <th>Kalem Adı</th>
                        <th>Menşei</th>
                        <th>Miktarı</th>
                        <th>Birimi</th>
                        <th>Güncel Birim Fiyatı</th>
                        <th>Birim Tekrar Fiyatı</th>
                        <th>Yeni Kalem Toplam Fiyatı</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <tr>
                            <td>@Model.Items[i].ItemName</td>
                            <td>@Model.Items[i].Origin</td>
                            <td>@Model.Items[i].Quantity</td>
                            <td>@Model.Items[i].Unit</td>
                            <td>@Model.Items[i].PreviousUnitPrice.ToString("N2", tr) ₺</td>
                            <td>
                                <input type="text" inputmode="decimal" pattern="[0-9]+([\.,][0-9]{1,2})?"
                                    name="Items[@i].ReOfferUnitPrice" value="@Model.Items[i].ReOfferUnitPrice"
                                    class="input-price" data-index="@i" data-prev="@Model.Items[i].PreviousUnitPrice" /> ₺
                            </td>
                            <td class="line-total" data-index="@i">@Model.Items[i].LineTotal.ToString("N2", tr) ₺</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>

        <section class="totals">
            <div class="totals-box">
                <div>
                    Toplam Teklif Tutarı: <strong id="grand-total">@Model.GrandTotal.ToString("N2", tr) ₺</strong>
                </div>
                <div>
                    @{
                        decimal currentRoundDec = Model.DecrementTotal;
                        if (Model.SubmittedBids != null && Model.SubmittedBids.Count > 0)
                        {
                            var ordered = Model.SubmittedBids.OrderBy(x => x.Round).ToList();
                            decimal prevRoundsTotal = 0m;
                            foreach (var sb in ordered)
                            {
                                if (sb.Round < Model.CurrentRound)
                                {
                                    prevRoundsTotal = sb.Decrement; // cumulatif toplam önceki turun son değeri
                                }
                                else if (sb.Round == Model.CurrentRound)
                                {
                                    currentRoundDec = sb.Decrement - prevRoundsTotal;
                                    break;
                                }
                            }
                        }
                    }
                    Eksiltme Tutarı: <strong id="decrement-total">@currentRoundDec.ToString("N2", tr) ₺</strong>
                </div>
            </div>
            <div>
                <span>Tur: <strong>@Model.CurrentRound</strong> / <strong>@Model.TotalRounds</strong></span>
            </div>
            <div>
                <button type="submit" name="ActionName" value="submit" class="submit-btn"
                    style="margin-right:8px;">Teklifi Gönder</button>
                @if (Model.CurrentRound < Model.TotalRounds)
                {
                    <button type="submit" name="ActionName" value="next" class="submit-btn">Sonraki Oturuma Geç</button>
                }
                else
                {
                    <button type="submit" name="ActionName" value="finish" class="submit-btn">Oturumu Bitir</button>
                }
            </div>
        </section>
    </form>
</div>

<style>
    .page-title {
        margin-left: 92px;
    }

    .canli-container {
        max-width: 1100px;
        margin: 0 auto;
        display: grid;
        gap: 20px;
    }

    .ihale-bilgi .grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: 12px;
    }

    .ihale-bilgi .label {
        font-size: .85rem;
        color: #6b7280;
    }

    .ihale-bilgi .value {
        font-weight: 600;
    }

    .timers-rank {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 16px;
        align-items: center;
    }

    .timers {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        gap: 12px;
    }

    .timer-card {
        border: 1px solid #e5e7eb;
        background: #f9fafb;
        border-radius: 10px;
        padding: 12px 16px;
    }

    .timer-title {
        font-size: .9rem;
        color: #6b7280;
    }

    .timer-value {
        font-size: 1.8rem;
        font-weight: 700;
        margin: 4px 0;
    }

    .timer-sub {
        font-size: .85rem;
        color: #374151;
    }

    .rank-badge {
        display: inline-flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 90px;
        height: 90px;
        border-radius: 50%;
        background: #0d6efd;
        color: #fff;
    }

    .rank-number {
        font-size: 2rem;
        line-height: 1;
    }

    .rank-label {
        font-size: .8rem;
        opacity: .9;
    }

    .submitted-bids {
        position: fixed;
        margin-top: 70px;
        top: 16px;
        right: 20px;
        background: #ffffff;
        border: 1px solid #e5e7eb;
        border-radius: 14px;
        padding: 14px 16px 14px 16px;
        width: 340px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    }

    .submitted-bids-title {
        font-weight: 700;
        margin-bottom: 10px;
    }

    .submitted-bids-list {
        margin: 0;
        padding-left: 18px;
        max-height: 60vh;
        overflow: auto;
    }

    .submitted-bids-list li {
        margin-bottom: 10px;
    }

    .rank-badge.inside {
        position: absolute;
        top: -18px;
        right: -18px;
        width: 78px;
        height: 78px;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .items-table th,
    .items-table td {
        border-bottom: 1px solid #eee;
        padding: 10px;
        text-align: left;
        vertical-align: middle;
    }

    .items-table thead th {
        background: #f3f4f6;
        font-weight: 600;
    }

    .input-price {
        width: 140px;
        padding: 4px 6px;
    }

    .totals {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .totals-box {
        background: #f1f5f9;
        border: 1px solid #e2e8f0;
        padding: 10px 14px;
        border-radius: 6px;
    }

    .submit-btn {
        background: #0d6efd;
        color: #fff;
        border: none;
        padding: 10px 16px;
        border-radius: 6px;
    }
</style>

<script>
    (function () {
        const roundEnd = new Date('@Model.RoundEnd.ToString("o")');
        const tenderEnd = new Date('@Model.TenderEnd.ToString("o")');
        const roundEl = document.getElementById('round-timer');
        const tenderEl = document.getElementById('tender-timer');
        function pad(n) { return n.toString().padStart(2, '0'); }
        function fmt(ms) {
            let totalSeconds = Math.floor(Math.max(0, ms) / 1000);

            const days = Math.floor(totalSeconds / 86400);
            totalSeconds %= 86400;

            const hours = Math.floor(totalSeconds / 3600);
            totalSeconds %= 3600;

            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;

            return `${days}g ${pad(hours)}s ${pad(minutes)}dk ${pad(seconds)}sn`;
        }
        function tick() {
            const now = new Date();
            roundEl.textContent = fmt(roundEnd - now);
            tenderEl.textContent = fmt(tenderEnd - now);
        }
        tick();
        setInterval(tick, 1000);
    })();

    (function () {
        const inputs = document.querySelectorAll('.input-price');
        const grandTotalEl = document.getElementById('grand-total');
        const decEl = document.getElementById('decrement-total');
        const quantities = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Items.ConvertAll(i => i.Quantity)));
        const nextBtn = document.querySelector('button[name="ActionName"][value="next"]');
        const minStepEl = document.getElementById('min-step');
        const prevGrandEl = document.getElementById('prev-grand');
        function parseNumLocale(raw) {
            let s = (raw ?? '').toString().trim();
            if (!s) return 0;
            s = s.replace(/\s/g, '');
            const lastDot = s.lastIndexOf('.');
            const lastComma = s.lastIndexOf(',');
            if (lastDot >= 0 && lastComma >= 0) {
                const commaIsDecimal = lastComma > lastDot;
                const thousand = commaIsDecimal ? /\./g : /,/g;
                const dec = commaIsDecimal ? /,/g : /\./g;
                s = s.replace(thousand, '').replace(dec, '.');
            } else if (lastComma >= 0) {
                s = s.replace(/\./g, '').replace(/,/g, '.');
            }
            const n = parseFloat(s);
            return isNaN(n) ? 0 : n;
        }
        function formatTr(amount) {
            try { return amount.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); }
            catch { return amount.toFixed(2); }
        }
        function recalc() {
            let grand = 0;
            document.querySelectorAll('.line-total').forEach((td) => {
                const i = parseInt(td.getAttribute('data-index'));
                const inputEl = document.querySelector(`input[data-index="${i}"]`);
                const raw = inputEl.value;
                const hasInput = raw !== undefined && raw !== null && raw !== '';
                const prev = parseFloat(inputEl.getAttribute('data-prev') || '0');
                const val = hasInput ? parseNumLocale(raw) : prev;
                const qty = Number(quantities[i]);
                const line = val * qty;
                td.textContent = formatTr(line) + ' ₺';
                grand += line;
            });
            grandTotalEl.textContent = formatTr(grand) + ' ₺';
            const baseline = parseFloat(prevGrandEl?.getAttribute('data-value') || '0');
            const dec = Math.max(0, baseline - grand);
            decEl.textContent = formatTr(dec) + ' ₺';

            if (minStepEl && nextBtn) {
                const minStep = parseFloat(minStepEl.getAttribute('data-value') || '0');
                if (!isNaN(minStep) && minStep > 0) {
                    nextBtn.disabled = dec < minStep;
                    nextBtn.title = dec < minStep ? `Yapılan eksiltme en az ${formatTr(minStep)} ₺ olmalıdır.` : '';
                }
            }
        }
        inputs.forEach(inp => inp.addEventListener('input', recalc));
    })();
</script>
